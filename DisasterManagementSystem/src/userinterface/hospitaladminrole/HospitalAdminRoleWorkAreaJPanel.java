/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.hospitaladminrole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalToPoliceRequest;
import Business.WorkQueue.PoliceToHospitalRequest;
import Business.WorkQueue.VictimHelpRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.request.PoliceToHospitalRequestDetailsJPanel;
import userinterface.request.VictimRequestDetailsJPanel;


public class HospitalAdminRoleWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalAdminRoleWorkAreaJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private UserAccount hospitalAdminAccount;
    private Enterprise currentEnterprise;

    public HospitalAdminRoleWorkAreaJPanel(JPanel userProcessContainer, EcoSystem ecosystem, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.hospitalAdminAccount = userAccount;
        initialize();
        populateDoctors();
        populateHospitalStaff();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddDoctor = new javax.swing.JButton();
        btnUpdateDoctor = new javax.swing.JButton();
        btnDeleteDoctor = new javax.swing.JButton();
        btnDeleteHospitalStaff = new javax.swing.JButton();
        btnUpdateHospitalStaff = new javax.swing.JButton();
        btnAddHospitalStaff = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestDirectory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctorsDirectory = new javax.swing.JTable();
        btnRequestPoliceHelp = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHospitalStaffDirectory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnViewDetails = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 240));

        btnAddDoctor.setText("Add");
        btnAddDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDoctorActionPerformed(evt);
            }
        });

        btnUpdateDoctor.setText("Update");
        btnUpdateDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDoctorActionPerformed(evt);
            }
        });

        btnDeleteDoctor.setText("Delete");
        btnDeleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDoctorActionPerformed(evt);
            }
        });

        btnDeleteHospitalStaff.setText("Delete");
        btnDeleteHospitalStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteHospitalStaffActionPerformed(evt);
            }
        });

        btnUpdateHospitalStaff.setText("Update");
        btnUpdateHospitalStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHospitalStaffActionPerformed(evt);
            }
        });

        btnAddHospitalStaff.setText("Add");
        btnAddHospitalStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHospitalStaffActionPerformed(evt);
            }
        });

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblRequestDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "RequestID", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequestDirectory);

        tblDoctorsDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor Username", "Doctor Name", "Phone No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDoctorsDirectory);

        btnRequestPoliceHelp.setText("Alert Police");
        btnRequestPoliceHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestPoliceHelpActionPerformed(evt);
            }
        });

        tblHospitalStaffDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hospital Staff Username", "Hospital Staff  Name", "Phone No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblHospitalStaffDirectory);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/assets/images/medical-team-group-of-hospital-workers-illustration.jpg"))); // NOI18N

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnAddDoctor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteDoctor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateDoctor, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnAddHospitalStaff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteHospitalStaff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateHospitalStaff, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnViewDetails)
                        .addGap(18, 18, 18)
                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRequestPoliceHelp)))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1376, 1376, 1376))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnProcess)
                            .addComponent(btnCancel)
                            .addComponent(btnRequestPoliceHelp)
                            .addComponent(btnViewDetails))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddDoctor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateDoctor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteDoctor))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddHospitalStaff)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateHospitalStaff)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteHospitalStaff)))))
                .addGap(387, 387, 387))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDoctorActionPerformed
        // TODO add your handling code here:
        JPanel addDoctorJPanel = new AddDoctorJPanel(userProcessContainer, ecosystem, hospitalAdminAccount);
        userProcessContainer.add("addDoctor", addDoctorJPanel);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(this.userProcessContainer);
    }//GEN-LAST:event_btnAddDoctorActionPerformed

    private void btnUpdateDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDoctorsDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            UserAccount doctor = ((UserAccount) tblDoctorsDirectory.getValueAt(selectedRow, 0));
            //Item selectedItem = restaurant.getMenu().getItemFromName(selectedItemName);
            JPanel updateDoctorJPanel = new UpdateDoctorJPanel(userProcessContainer, ecosystem, hospitalAdminAccount, doctor);
            userProcessContainer.add("updateDoctor", updateDoctorJPanel);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(this.userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnUpdateDoctorActionPerformed

    private void btnDeleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDoctorsDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount doctor = (UserAccount) tblDoctorsDirectory.getValueAt(selectedRow, 0);
                for (UserAccount ua : this.ecosystem.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getUsername().equals(doctor.getUsername())) {
                        this.ecosystem.getUserAccountDirectory().getUserAccountList().remove(ua);
                        break;
                    }
                }
                outerloop:
                for (Network n : this.ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getUserAccount().getUsername().equals(this.hospitalAdminAccount.getUsername())) {
                            this.currentEnterprise = e;
                            for (UserAccount d : e.getUserAccountDirectory().getUserAccountList()) {
                                if (d.getUsername().equals(doctor.getUsername())) {
                                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (o.getName().equals(Organization.Type.Doctor.getValue())) {
                                            o.getUserAccountDirectory().getUserAccountList().remove(d);
                                            e.getUserAccountDirectory().getUserAccountList().remove(d);
                                            break outerloop;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
                dB4OUtil.storeSystem(this.ecosystem);
                populateDoctors();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeleteDoctorActionPerformed

    private void btnDeleteHospitalStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteHospitalStaffActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHospitalStaffDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount hospitalStaff = (UserAccount) tblHospitalStaffDirectory.getValueAt(selectedRow, 0);
                for (UserAccount ua : this.ecosystem.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getUsername().equals(hospitalStaff.getUsername())) {
                        this.ecosystem.getUserAccountDirectory().getUserAccountList().remove(ua);
                        break;
                    }
                }
                outerloop:
                for (Network n : this.ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getUserAccount().getUsername().equals(this.hospitalAdminAccount.getUsername())) {
                            this.currentEnterprise = e;
                            for (UserAccount hs : e.getUserAccountDirectory().getUserAccountList()) {
                                if (hs.getUsername().equals(hospitalStaff.getUsername())) {
                                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (o.getName().equals(Organization.Type.HospitalStaff.getValue())) {
                                            o.getUserAccountDirectory().getUserAccountList().remove(hs);
                                            e.getUserAccountDirectory().getUserAccountList().remove(hs);
                                            break outerloop;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
                dB4OUtil.storeSystem(this.ecosystem);
                populateHospitalStaff();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeleteHospitalStaffActionPerformed

    private void btnUpdateHospitalStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateHospitalStaffActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHospitalStaffDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            UserAccount packager = ((UserAccount) tblHospitalStaffDirectory.getValueAt(selectedRow, 0));
            //Item selectedItem = restaurant.getMenu().getItemFromName(selectedItemName);
            JPanel updateHospitalStaffJPanel = new UpdateHospitalStaffJPanel(userProcessContainer, ecosystem, hospitalAdminAccount, packager);
            userProcessContainer.add("updateHospitalStaff", updateHospitalStaffJPanel);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(this.userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnUpdateHospitalStaffActionPerformed

    private void btnAddHospitalStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHospitalStaffActionPerformed
        // TODO add your handling code here:
        JPanel addHospitalStaffJPanel = new AddHospitalStaffJPanel(userProcessContainer, ecosystem, hospitalAdminAccount);
        userProcessContainer.add("addHospitalStaff", addHospitalStaffJPanel);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(this.userProcessContainer);
    }//GEN-LAST:event_btnAddHospitalStaffActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to process");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();

            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);
            if (cwr.getStatus().equals("submitted")) {
                cwr.setStatus("approved for treatment");
                if (cwr instanceof PoliceToHospitalRequest) {
                    ((PoliceToHospitalRequest) cwr).getVictimHelpRequest().setStatus("approved for treatment");
                }
                cwr.setAssignedEnterprise(this.currentEnterprise);
                JOptionPane.showMessageDialog(null, "Approved for treatment");
            }
            else if (cwr.getStatus().equals("cancelled")) {
                JOptionPane.showMessageDialog(null, "Cannot process! request already cancelled");
            }
            else {
                JOptionPane.showMessageDialog(null, "Already approved");
            }
            populateRequests();
        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to cancel");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();
            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);
            if (cwr.getStatus().equals("completed")) {
                JOptionPane.showMessageDialog(null, "Cannot cancel request already completed");
            } else {
                cwr.setStatus("submitted");
                cwr.setAssignedEnterprise(null);
                JOptionPane.showMessageDialog(null,"Request unassigned!");
            }
            populateRequests();
        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRequestPoliceHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestPoliceHelpActionPerformed
        int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to process");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();

            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);
            if(cwr instanceof PoliceToHospitalRequest){
                JOptionPane.showMessageDialog(null, "Cannot create police alert!");
            }
            else if (!cwr.getStatus().equals("submitted")) {
                cwr.setAssignedEnterprise(this.currentEnterprise);
                JPanel alertPoliceJPanel = new AlertPoliceJPanel(userProcessContainer, ecosystem, cwr, hospitalAdminAccount);
                userProcessContainer.add("alertPolice", alertPoliceJPanel);
                CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
                cardLayout.next(this.userProcessContainer);
                JOptionPane.showMessageDialog(null,"Request submitted to Police Departments!");
            } else {
                JOptionPane.showMessageDialog(null, "Request not approved yet");
            }
            populateRequests();
        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnRequestPoliceHelpActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
                int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to view details");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();
            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);

            if (cwr instanceof VictimHelpRequest) {
                JPanel victimRequestDetailsJPanel = new VictimRequestDetailsJPanel(userProcessContainer, cwr);
                userProcessContainer.add("RequestDetails", victimRequestDetailsJPanel);
                CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
                cardLayout.next(this.userProcessContainer);
            } else {
                JPanel policeToHospitalRequestDetailsJPanel = new PoliceToHospitalRequestDetailsJPanel(userProcessContainer, cwr);
                userProcessContainer.add("RequestDetails", policeToHospitalRequestDetailsJPanel);
                CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
                cardLayout.next(this.userProcessContainer);
            }

        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    public void populateHospitalStaff() {
        DefaultTableModel dtm = (DefaultTableModel) tblHospitalStaffDirectory.getModel();
        dtm.setRowCount(0);
        for (UserAccount n : this.currentEnterprise.getUserAccountDirectory().getUserAccountList()) {
            if (n.getRole().getRoleType().equals(Role.RoleType.HospitalStaff)) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = n;
                row[1] = n.getUser().getName();
                row[2] = n.getUser().getPhone();
                dtm.addRow(row);
            }

        }
    }

    public void populateDoctors() {
        DefaultTableModel dtm = (DefaultTableModel) tblDoctorsDirectory.getModel();
        dtm.setRowCount(0);
        for (UserAccount n : this.currentEnterprise.getUserAccountDirectory().getUserAccountList()) {
            if (n.getRole().getRoleType().equals(Role.RoleType.Doctor)) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = n;
                row[1] = n.getUser().getName();
                row[2] = n.getUser().getPhone();
                dtm.addRow(row);
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDoctor;
    private javax.swing.JButton btnAddHospitalStaff;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeleteDoctor;
    private javax.swing.JButton btnDeleteHospitalStaff;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRequestPoliceHelp;
    private javax.swing.JButton btnUpdateDoctor;
    private javax.swing.JButton btnUpdateHospitalStaff;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblDoctorsDirectory;
    private javax.swing.JTable tblHospitalStaffDirectory;
    private javax.swing.JTable tblRequestDirectory;
    // End of variables declaration//GEN-END:variables

    private void populateRequests() {
        DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();
        dtm.setRowCount(0);

        for (WorkRequest w : ecosystem.getWorkQueue().getWorkRequestList()) {
            if (w.getRequestedEnterprise().equals(Enterprise.EnterpriseType.Hospital)
                    && w.getAssignedEnterprise() == null
                    && this.currentEnterprise.getZipCodes().contains(w.getAddress().getZipcode())
                    && w.getStatus().equals("submitted")) {
                Object[] row = new Object[tblRequestDirectory.getColumnCount()];
                row[0] = w.getRequestID();
                row[1] = w.getSender().getUser().getName();
                row[2] = w.getStatus();
                dtm.addRow(row);
            }
        }

        for (WorkRequest w : ecosystem.getWorkQueue().getWorkRequestList()) {
            if (w.getAssignedEnterprise() == this.currentEnterprise) {
                Object[] row = new Object[tblRequestDirectory.getColumnCount()];
                row[0] = w.getRequestID();
                row[1] = w.getSender().getUser().getName();
                row[2] = w.getStatus();
                dtm.addRow(row);
            }
        }
    }

    public void initialize() {
        outerloop:
        for (Network n : this.ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getUserAccount().getUsername().equals(this.hospitalAdminAccount.getUsername())) {
                    this.currentEnterprise = e;
                    break outerloop;
                }
            }
        }

        populateRequests();
    }
}
