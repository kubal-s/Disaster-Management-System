/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.foodbankadminrole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.Enterprise.FoodBankEnterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author akhil
 */
public class FoodBankAdminRoleWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FoodBankAdminRoleWorkAreaJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private UserAccount foodBankAdminAccount;
    private Enterprise currentEnterprise;

    public FoodBankAdminRoleWorkAreaJPanel(JPanel userProcessContainer, EcoSystem ecosystem, UserAccount userAccount) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.foodBankAdminAccount = userAccount;
        initialize();
        populatePackagers();
        populateDeliveryMan();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblFoodPacketCount = new javax.swing.JLabel();
        editFoodPackets = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestDirectory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDeliveryManDirectory = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPackagersDirectory = new javax.swing.JTable();
        btnAddDeliveryMan = new javax.swing.JButton();
        btnUpdateDeliveryMan = new javax.swing.JButton();
        btnDeleteDeliveryMan = new javax.swing.JButton();
        btnDeletePackager = new javax.swing.JButton();
        btnUpdatePackager = new javax.swing.JButton();
        btnAddPackager = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jLabel1.setText("Available Food Packets:");

        lblFoodPacketCount.setText("0");

        editFoodPackets.setText("Edit");
        editFoodPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFoodPacketsActionPerformed(evt);
            }
        });

        tblRequestDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "RequestID", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequestDirectory);

        tblDeliveryManDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Delivery Man Username", "Delivery Man Name", "Phone No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDeliveryManDirectory);

        tblPackagersDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Packager Username", "Packager Name", "Phone No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblPackagersDirectory);

        btnAddDeliveryMan.setText("Add");
        btnAddDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDeliveryManActionPerformed(evt);
            }
        });

        btnUpdateDeliveryMan.setText("Update");
        btnUpdateDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDeliveryManActionPerformed(evt);
            }
        });

        btnDeleteDeliveryMan.setText("Delete");
        btnDeleteDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDeliveryManActionPerformed(evt);
            }
        });

        btnDeletePackager.setText("Delete");
        btnDeletePackager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePackagerActionPerformed(evt);
            }
        });

        btnUpdatePackager.setText("Update");
        btnUpdatePackager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePackagerActionPerformed(evt);
            }
        });

        btnAddPackager.setText("Add");
        btnAddPackager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPackagerActionPerformed(evt);
            }
        });

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnProcess)
                        .addGap(39, 39, 39)
                        .addComponent(btnCancel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(lblFoodPacketCount)
                            .addGap(18, 18, 18)
                            .addComponent(editFoodPackets))
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddDeliveryMan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeleteDeliveryMan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdateDeliveryMan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGap(34, 34, 34)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddPackager, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeletePackager, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdatePackager, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(119, 119, 119))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblFoodPacketCount)
                    .addComponent(editFoodPackets, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcess)
                    .addComponent(btnCancel))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddDeliveryMan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateDeliveryMan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteDeliveryMan))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddPackager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdatePackager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeletePackager)))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDeliveryManActionPerformed
        // TODO add your handling code here:       
        JPanel addDeliveryManJPanel = new AddDeliveryManJPanel(userProcessContainer, ecosystem, foodBankAdminAccount);
        userProcessContainer.add("addDeliveryMan", addDeliveryManJPanel);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(this.userProcessContainer);
    }//GEN-LAST:event_btnAddDeliveryManActionPerformed

    private void btnAddPackagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPackagerActionPerformed
        // TODO add your handling code here:
        JPanel addPackagerJPanel = new AddPackagerJPanel(userProcessContainer, ecosystem, foodBankAdminAccount);
        userProcessContainer.add("addPackager", addPackagerJPanel);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(this.userProcessContainer);
    }//GEN-LAST:event_btnAddPackagerActionPerformed

    private void btnUpdateDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDeliveryManActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDeliveryManDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            UserAccount deliveryMan = ((UserAccount) tblDeliveryManDirectory.getValueAt(selectedRow, 0));
            //Item selectedItem = restaurant.getMenu().getItemFromName(selectedItemName);
            JPanel updateDeliveryManJPanel = new UpdateDeliveryManJPanel(userProcessContainer, ecosystem, foodBankAdminAccount, deliveryMan);
            userProcessContainer.add("updateDeliveryMan", updateDeliveryManJPanel);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(this.userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnUpdateDeliveryManActionPerformed

    private void btnDeleteDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDeliveryManActionPerformed
        // TODO add your handling code here:       
        int selectedRow = tblDeliveryManDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount deliveryMan = (UserAccount) tblDeliveryManDirectory.getValueAt(selectedRow, 0);
                for (UserAccount ua : this.ecosystem.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getUsername().equals(deliveryMan.getUsername())) {
                        this.ecosystem.getUserAccountDirectory().getUserAccountList().remove(ua);
                        break;
                    }
                }
                outerloop:
                for (Network n : this.ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getUserAccount().getUsername().equals(this.foodBankAdminAccount.getUsername())) {
                            this.currentEnterprise = e;
                            for (UserAccount p : e.getUserAccountDirectory().getUserAccountList()) {
                                if (p.getUsername().equals(deliveryMan.getUsername())) {
                                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (o.getName().equals(Organization.Type.Delivery.getValue())) {
                                            o.getUserAccountDirectory().getUserAccountList().remove(p);
                                            e.getUserAccountDirectory().getUserAccountList().remove(p);
                                            break outerloop;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
                dB4OUtil.storeSystem(this.ecosystem);
                populateDeliveryMan();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeleteDeliveryManActionPerformed

    private void btnDeletePackagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePackagerActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPackagersDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount packager = (UserAccount) tblPackagersDirectory.getValueAt(selectedRow, 0);
                for (UserAccount ua : this.ecosystem.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getUsername().equals(packager.getUsername())) {
                        this.ecosystem.getUserAccountDirectory().getUserAccountList().remove(ua);
                        break;
                    }
                }
                outerloop:
                for (Network n : this.ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getUserAccount().getUsername().equals(this.foodBankAdminAccount.getUsername())) {
                            this.currentEnterprise = e;
                            for (UserAccount p : e.getUserAccountDirectory().getUserAccountList()) {
                                if (p.getUsername().equals(packager.getUsername())) {
                                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (o.getName().equals(Organization.Type.FoodPackaging.getValue())) {
                                            o.getUserAccountDirectory().getUserAccountList().remove(p);
                                            e.getUserAccountDirectory().getUserAccountList().remove(p);
                                            break outerloop;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
                dB4OUtil.storeSystem(this.ecosystem);
                populatePackagers();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeletePackagerActionPerformed

    private void editFoodPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFoodPacketsActionPerformed
        // TODO add your handling code here:
        JPanel foodPacketEditJPanel = new FoodPacketEditJPanel(userProcessContainer, ecosystem, currentEnterprise, foodBankAdminAccount);
        userProcessContainer.add("foodPacketView", foodPacketEditJPanel);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(this.userProcessContainer);
    }//GEN-LAST:event_editFoodPacketsActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to process");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();

            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);
            if(cwr.getStatus().equals("submitted")){
                cwr.setStatus("approved for packaging");
                cwr.setAssignedEnterprise(this.currentEnterprise);
            }
            else{
                JOptionPane.showMessageDialog(null, "Already sent for packaging");
            }
            populateRequests();
        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedRow = tblRequestDirectory.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a request to cancel");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();
            int requestID = (int) (Integer) dtm.getValueAt(selectedRow, 0);
            WorkRequest cwr = null;
            cwr = ecosystem.getWorkQueue().getWorkRequestByID(requestID);
            if (cwr.getStatus().equals("completed")) {
                JOptionPane.showMessageDialog(null, "Cannot cancel request already completed");
            } else {
                cwr.setStatus("submitted");
                cwr.setAssignedEnterprise(null);
            }
            populateRequests();
        }
        DB4OUtil.getInstance().storeSystem(ecosystem);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdatePackagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePackagerActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPackagersDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            UserAccount packager = ((UserAccount) tblPackagersDirectory.getValueAt(selectedRow, 0));
            //Item selectedItem = restaurant.getMenu().getItemFromName(selectedItemName);
            JPanel updatePackagerJPanel = new UpdatePackagerJPanel(userProcessContainer, ecosystem, foodBankAdminAccount, packager);
            userProcessContainer.add("updatePackager", updatePackagerJPanel);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(this.userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnUpdatePackagerActionPerformed
    public void populatePackagers() {
        DefaultTableModel dtm = (DefaultTableModel) tblPackagersDirectory.getModel();
        dtm.setRowCount(0);
        for (UserAccount n : this.currentEnterprise.getUserAccountDirectory().getUserAccountList()) {
            if (n.getRole().getRoleType().equals(Role.RoleType.FoodPackager)) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = n;
                row[1] = n.getUser().getName();
                row[2] = n.getUser().getPhone();
                dtm.addRow(row);
            }

        }
    }

    public void populateDeliveryMan() {
        DefaultTableModel dtm = (DefaultTableModel) tblDeliveryManDirectory.getModel();
        dtm.setRowCount(0);
        for (UserAccount n : this.currentEnterprise.getUserAccountDirectory().getUserAccountList()) {
            if (n.getRole().getRoleType().equals(Role.RoleType.DeliveryMan)) {
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = n;
                row[1] = n.getUser().getName();
                row[2] = n.getUser().getPhone();
                dtm.addRow(row);
            }

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDeliveryMan;
    private javax.swing.JButton btnAddPackager;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeleteDeliveryMan;
    private javax.swing.JButton btnDeletePackager;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnUpdateDeliveryMan;
    private javax.swing.JButton btnUpdatePackager;
    private javax.swing.JButton editFoodPackets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFoodPacketCount;
    private javax.swing.JTable tblDeliveryManDirectory;
    private javax.swing.JTable tblPackagersDirectory;
    private javax.swing.JTable tblRequestDirectory;
    // End of variables declaration//GEN-END:variables

    private void populateRequests() {
        System.out.println(ecosystem.getWorkQueue().getWorkRequestList().size());
        DefaultTableModel dtm = (DefaultTableModel) tblRequestDirectory.getModel();
        dtm.setRowCount(0);

        for (WorkRequest w : ecosystem.getWorkQueue().getWorkRequestList()) {
            if (w.getRequestedEnterprise().equals(Enterprise.EnterpriseType.FoodBank)
                    && w.getAssignedEnterprise() == null
                    && this.currentEnterprise.getZipCodes().contains(w.getAddress().getZipcode())) {
                Object[] row = new Object[tblRequestDirectory.getColumnCount()];
                row[0] = w.getRequestID();
                row[1] = w.getSender().getUser().getName();
                row[2] = w.getStatus();
                dtm.addRow(row);
            }
        }

        for (WorkRequest w : ecosystem.getWorkQueue().getWorkRequestList()) {
            if (w.getAssignedEnterprise() == this.currentEnterprise) {
                Object[] row = new Object[tblRequestDirectory.getColumnCount()];
                row[0] = w.getRequestID();
                row[1] = w.getSender().getUser().getName();
                row[2] = w.getStatus();
                dtm.addRow(row);
            }
        }
    }

    public void initialize() {
        outerloop:
        for (Network n : this.ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.getUserAccount().getUsername().equals(this.foodBankAdminAccount.getUsername())) {
                    this.currentEnterprise = e;
                    break outerloop;
                }
            }
        }

        lblFoodPacketCount.setText(String.valueOf(((FoodBankEnterprise) this.currentEnterprise).getFoodPackets()));
        populateRequests();
    }
}
